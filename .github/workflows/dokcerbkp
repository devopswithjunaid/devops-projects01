name: Build Docker Images
  
on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the 'main' branch
  pull_request:
    branches:
      - main # Also trigger on pull requests to 'main' for validation

jobs:
  build_backend_image:
    runs-on: ubuntu-latest # The type of runner that the job will run on
    env:
      IMAGE_NAME: wanderlust-backend # Define a variable for the image name

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE

      # Optional: Login to Docker Hub if you plan to push images
      # Uncomment the following lines and set up DOCKER_USERNAME/DOCKER_PASSWORD secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Sets up Docker Buildx, required for build-push-action

      - name: Build and tag backend Docker image
        uses: docker/build-push-action@v5 # Builds and optionally pushes Docker images
        with:
          context: ./wanderlust-3tier-project/backend # The build context for the Dockerfile
          file: ./wanderlust-3tier-project/backend/Dockerfile # Path to the Dockerfile
          push: true # Set to 'true' to push the image to Docker Hub (or your registry)
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} 
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max # Cache layers for future builds

  build_frontend_image:
    runs-on: ubuntu-latest # The type of runner that the job will run on
    env:
      IMAGE_NAME: wanderlust-frontend # Define a variable for the image name

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Checks out your repository under $GITHUB_WORKSPACE


      - name: List frontend directory contents
        run: ls -al ./wanderlust-3tier-project/frontend/
      - name: Check .env.sample permissions
        run: ls -l ./wanderlust-3tier-project/frontend/.env.sample     

      # Optional: Login to Docker Hub if you plan to push images
      # Uncomment the following lines and set up DOCKER_USERNAME/DOCKER_PASSWORD secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Sets up Docker Buildx

      - name: Build and tag frontend Docker image
        uses: docker/build-push-action@v5 # Builds and optionally pushes Docker images
        with:
          context: ./wanderlust-3tier-project/frontend # The build context for the Dockerfile
          file: ./wanderlust-3tier-project/frontend/Dockerfile_optimized # Path to the Dockerfile
          push: true # Set to 'true' to push the image to Docker Hub (or your registry)
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }} 
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max # Cache layers for future builds

  sonarqube_analysis:
    runs-on: ubuntu-latest
    needs: [build_backend_image, build_frontend_image]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # - name: Verify SonarQube configuration
      #   run: |
      #     if [ -z "${{ secrets.SONARQUBE_TOKEN}}}" ]; then
      #       echo "ERROR: SONARQUBE_TOKEN} secret is not set"
      #       exit 1
      #     fi
      #     if [ -z "${{ secrets.SONAR_HOST_URL }}" ]; then
      #       echo "ERROR: SONAR_HOST_URL secret is not set"
      #       exit 1
      #     fi
      #     echo "SonarQube URL: ${{ secrets.SONAR_HOST_URL }}"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.3.0  # Use specific version instead of @master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN}}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        # with:
        #   args: >
        #     -Dsonar.projectKey=cicd-demo
        #     -Dsonar.projectName=cicd-demo
        #     -Dsonar.sources=./wanderlust-3tier-project
        #     -Dsonar.exclusions=**/node_m
# Just add this job to your existing workflow
  trivy_scan:
    runs-on: ubuntu-latest
    needs: [build_backend_image, build_frontend_image]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ github.repository_owner }}/wanderlust-backend:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'

      - name: Scan frontend image  
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ github.repository_owner }}/wanderlust-frontend:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'     
