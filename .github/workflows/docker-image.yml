name: Build Docker Images with Security Scanning and Deployment
  
on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the 'main' branch
  pull_request:
    branches:
      - main # Also trigger on pull requests to 'main' for validation

# Add permissions for GitHub Security uploads
permissions:
  contents: read
  security-events: write  # Required for uploading SARIF files
  actions: read

jobs:
  # üîç Filesystem & Secret Scanning - runs first for fast feedback
  security_scan:
    runs-on: ubuntu-latest
    name: üîç Code Security Analysis
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install dependencies for better npm analysis
      - name: Setup Node.js for dependency analysis
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install backend dependencies
        run: |
          if [ -f "./wanderlust-3tier-project/backend/package.json" ]; then
            cd ./wanderlust-3tier-project/backend
            npm ci --only=production --ignore-scripts
          fi

      - name: Install frontend dependencies  
        run: |
          if [ -f "./wanderlust-3tier-project/frontend/package.json" ]; then
            cd ./wanderlust-3tier-project/frontend
            npm ci --only=production --ignore-scripts
          fi

      # 1. FILESYSTEM SCANNING - Source code & dependencies
      - name: Scan filesystem for vulnerabilities
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail immediately, generate reports first
        id: filesystem-scan
        with:
          scan-type: 'fs'
          scan-ref: './wanderlust-3tier-project'
          format: 'sarif'
          output: 'trivy-filesystem-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          scanners: 'vuln'  # Only vulnerability scanning for filesystem

      - name: Upload filesystem vulnerabilities to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.filesystem-scan.outcome != 'skipped'
        continue-on-error: true  # Don't fail if upload fails
        with:
          sarif_file: 'trivy-filesystem-results.sarif'
          category: 'filesystem-vulnerabilities'

      # 2. SECRET DETECTION - API keys, passwords, tokens
      - name: Scan for exposed secrets
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail immediately, generate reports first
        id: secrets-scan
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'secret'  # Only secret scanning
          format: 'sarif'
          output: 'trivy-secrets-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: Upload secrets scan to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.secrets-scan.outcome != 'skipped'
        continue-on-error: true  # Don't fail if upload fails
        with:
          sarif_file: 'trivy-secrets-results.sarif'
          category: 'secret-detection'

      # Generate readable reports (always run)
      - name: Generate filesystem vulnerability report
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          scan-type: 'fs'
          scan-ref: './wanderlust-3tier-project'
          format: 'table'
          output: 'filesystem-vulnerabilities.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln'
          exit-code: '0'  # Don't fail, just generate report

      - name: Generate secrets detection report
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'secret'
          format: 'table'
          output: 'secrets-detection.txt'
          exit-code: '0'  # Don't fail, just generate report

      - name: Upload security scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-security-reports
          path: |
            filesystem-vulnerabilities.txt
            secrets-detection.txt

      # Check scan results and fail if critical issues found
      - name: Check filesystem scan results
        if: steps.filesystem-scan.outcome == 'failure'
        run: |
          echo "‚ùå Critical vulnerabilities found in filesystem scan!"
          echo "üìä Check the uploaded reports for details"
          exit 1

      - name: Check secrets scan results
        if: steps.secrets-scan.outcome == 'failure'
        run: |
          echo "‚ùå Secrets detected in repository!"
          echo "üìä Check the uploaded reports for details"
          exit 1

  build_backend_image:
    runs-on: ubuntu-latest
    needs: security_scan  # Only run if code security passes
    name: üê≥ Build & Scan Backend Image
    env:
      IMAGE_NAME: wanderlust-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build image locally for scanning (don't push yet)
      - name: Build backend Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./wanderlust-3tier-project/backend
          file: ./wanderlust-3tier-project/backend/Dockerfile
          push: false  # Don't push yet - scan first
          load: true   # Load for local scanning
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 3. IMAGE SCANNING - Docker image vulnerabilities
      - name: Scan backend Docker image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail immediately
        id: backend-image-scan
        with:
          image-ref: '${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-backend-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'  # Only vulnerability scanning for images

      - name: Upload backend image scan to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.backend-image-scan.outcome != 'skipped'
        continue-on-error: true
        with:
          sarif_file: 'trivy-backend-image-results.sarif'
          category: 'backend-image-vulnerabilities'

      - name: Generate backend image vulnerability report
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: '${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest'
          format: 'table'
          output: 'backend-image-vulnerabilities.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln'
          exit-code: '0'  # Don't fail, just generate report

      - name: Upload backend image report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-image-security-report
          path: backend-image-vulnerabilities.txt

      # Check image scan results
      - name: Check backend image scan results
        if: steps.backend-image-scan.outcome == 'failure'
        run: |
          echo "‚ùå Critical vulnerabilities found in backend Docker image!"
          echo "üìä Check the uploaded reports for details"
          exit 1

      # ‚úÖ Only push to registry if image scan passes
      - name: Push backend image to registry
        uses: docker/build-push-action@v5
        with:
          context: ./wanderlust-3tier-project/backend
          file: ./wanderlust-3tier-project/backend/Dockerfile
          push: true  # Now safe to push
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha

  build_frontend_image:
    runs-on: ubuntu-latest
    needs: security_scan  # Only run if code security passes
    name: üé® Build & Scan Frontend Image
    env:
      IMAGE_NAME: wanderlust-frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: List frontend directory contents
        run: ls -al ./wanderlust-3tier-project/frontend/

      - name: Check .env.sample permissions
        run: ls -l ./wanderlust-3tier-project/frontend/.env.sample

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build image locally for scanning (don't push yet)
      - name: Build frontend Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./wanderlust-3tier-project/frontend
          file: ./wanderlust-3tier-project/frontend/Dockerfile_optimized
          push: false  # Don't push yet - scan first
          load: true   # Load for local scanning
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 3. IMAGE SCANNING - Docker image vulnerabilities
      - name: Scan frontend Docker image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true  # Don't fail immediately
        id: frontend-image-scan
        with:
          image-ref: '${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest'
          format: 'sarif'
          output: 'trivy-frontend-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'  # Only vulnerability scanning for images

      - name: Upload frontend image scan to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.frontend-image-scan.outcome != 'skipped'
        continue-on-error: true
        with:
          sarif_file: 'trivy-frontend-image-results.sarif'
          category: 'frontend-image-vulnerabilities'

      - name: Generate frontend image vulnerability report
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: '${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest'
          format: 'table'
          output: 'frontend-image-vulnerabilities.txt'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          scanners: 'vuln'
          exit-code: '0'  # Don't fail, just generate report

      - name: Upload frontend image report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-image-security-report
          path: frontend-image-vulnerabilities.txt

      # Check image scan results
      - name: Check frontend image scan results
        if: steps.frontend-image-scan.outcome == 'failure'
        run: |
          echo "‚ùå Critical vulnerabilities found in frontend Docker image!"
          echo "üìä Check the uploaded reports for details"
          exit 1

      # ‚úÖ Only push to registry if image scan passes
      - name: Push frontend image to registry
        uses: docker/build-push-action@v5
        with:
          context: ./wanderlust-3tier-project/frontend
          file: ./wanderlust-3tier-project/frontend/Dockerfile_optimized
          push: true  # Now safe to push
          tags: |
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha

  sonarqube_analysis:
    runs-on: ubuntu-latest
    needs: [build_backend_image, build_frontend_image]
    name: üìà Code Quality Analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # üöÄ NEW: Remote Deployment with Docker Compose
  deploy_to_server:
    runs-on: ubuntu-latest
    needs: [build_backend_image, build_frontend_image, sonarqube_analysis]
    # Only deploy on main branch and when all previous jobs succeed
    if: github.ref == 'refs/heads/main' && success()
    name: üöÄ Deploy to Remote Server
    environment: 
      name: production
      url: https://example.com  # Your application URL

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          echo "üîó Testing SSH connection to deployment server..."
          ssh -o ConnectTimeout=10 ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} 'echo "‚úÖ SSH connection successful"'

      - name: Deploy with Docker Compose
        run: |
          echo "üöÄ Deploying application with Docker Compose..."
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} '
            set -e
            echo "üìÇ Navigating to project directory..."
            cd ${{ secrets.DEPLOY_PROJECT_PATH }}
            
            echo "üì• Pulling latest Docker images..."
            docker compose -f docker-compose_updated.yaml pull
            
            echo "üîÑ Restarting services with Docker Compose..."
            docker compose -f docker-compose_updated.yaml up -d
            
            echo "‚è≥ Waiting for services to be ready..."
            sleep 30
            
            echo "üè• Checking service health..."
            docker compose -f docker-compose_updated.yaml ps
            
            echo "‚úÖ Deployment completed successfully!"
          '

      - name: Verify deployment
        run: |
          echo "üß™ Verifying deployment..."
          
          # Wait a bit more for services to stabilize
          sleep 15
          
          # Check if application is responding
          if curl -f -s --max-time 30 https://example.com/health > /dev/null; then
            echo "‚úÖ Application health check passed"
          else
            echo "‚ö†Ô∏è Application health check failed, but deployment may still be in progress"
          fi
          
          # Get deployment info from server
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} '
            echo "üìä Current running containers:"
            docker compose ps
            echo ""
            echo "üìà Container resource usage:"
            docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          '

      - name: Deployment notification
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "üéâ Deployment successful!"
            echo "üåê Application URL: https://example.com"
            echo "üìä Commit: ${{ github.sha }}"
            echo "üë§ Deployed by: ${{ github.actor }}"
          else
            echo "‚ùå Deployment failed!"
            echo "üîç Check the logs above for details"
          fi

  # üìä Security Summary Report (runs after everything)
  security_summary:
    runs-on: ubuntu-latest
    needs: [deploy_to_server]
    if: always()  # Run even if deployment fails
    name: üìä Security & Deployment Summary

    steps:
      - name: Create comprehensive summary
        run: |
          echo "# üîí Security & Deployment Summary" > final-summary.md
          echo "" >> final-summary.md
          echo "## üèóÔ∏è Build & Deployment Status:" >> final-summary.md
          echo "- ‚úÖ **Security Scan**: ${{ needs.security_scan.result }}" >> final-summary.md
          echo "- ‚úÖ **Backend Build**: ${{ needs.build_backend_image.result }}" >> final-summary.md
          echo "- ‚úÖ **Frontend Build**: ${{ needs.build_frontend_image.result }}" >> final-summary.md
          echo "- ‚úÖ **Code Quality**: ${{ needs.sonarqube_analysis.result }}" >> final-summary.md
          echo "- üöÄ **Deployment**: ${{ needs.deploy_to_server.result }}" >> final-summary.md
          echo "" >> final-summary.md
          echo "## üîç Security Scans Performed:" >> final-summary.md
          echo "- ‚úÖ **Filesystem Vulnerabilities**: Source code and dependencies" >> final-summary.md
          echo "- ‚úÖ **Secret Detection**: API keys, passwords, and tokens" >> final-summary.md
          echo "- ‚úÖ **Backend Image**: Docker image vulnerabilities" >> final-summary.md
          echo "- ‚úÖ **Frontend Image**: Docker image vulnerabilities" >> final-summary.md
          echo "" >> final-summary.md
          echo "## üìä Available Reports:" >> final-summary.md
          echo "- **code-security-reports**: Filesystem vulnerabilities + Secret detection" >> final-summary.md
          echo "- **backend-image-security-report**: Backend Docker image analysis" >> final-summary.md
          echo "- **frontend-image-security-report**: Frontend Docker image analysis" >> final-summary.md
          echo "" >> final-summary.md
          echo "## üîç Results Location:" >> final-summary.md
          echo "- **GitHub Security Tab**: Integrated vulnerability tracking" >> final-summary.md
          echo "- **Action Artifacts**: Download detailed reports" >> final-summary.md
          echo "- **SonarQube**: Code quality analysis" >> final-summary.md
          echo "" >> final-summary.md
          echo "## üöÄ Deployment Information:" >> final-summary.md
          echo "- **Environment**: Production" >> final-summary.md
          echo "- **Commit SHA**: ${{ github.sha }}" >> final-summary.md
          echo "- **Deployed by**: ${{ github.actor }}" >> final-summary.md
          echo "- **Deployment time**: $(date)" >> final-summary.md
          echo "" >> final-summary.md
          echo "Generated: $(date)" >> final-summary.md

      - name: Upload final summary
        uses: actions/upload-artifact@v4
        with:
          name: final-deployment-summary
          path: final-summary.md

