pipeline {
    agent { label 'agent' }

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    parameters {
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deployment stage')
    }

    environment {
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_USER = "devopswithjunaid"     // ‚úÖ Your Docker Hub username
        BACKEND_IMAGE = "${DOCKER_USER}/wanderlust-backend"
        FRONTEND_IMAGE = "${DOCKER_USER}/wanderlust-frontend"
        TRIVY_CACHE_DIR = "${WORKSPACE}/.trivy-cache"
        DEPLOY_SUCCESS = "false"
        DOCKER_PUSH_SUCCESS = "false"
    }

    stages {
        stage('SCM Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/devopswithjunaid/devops-projects01.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('wanderlust-3tier-project/backend') {
                    sh "npm install || true"
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh "npm install || true"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    script {
                        def scannerHome = tool 'sonar-scanner'
                        dir('wanderlust-3tier-project/backend') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=wanderlust-backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://20.55.29.56:9001 \
                                -Dsonar.login=\$SONAR_AUTH_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                echo "üìä Running code quality checks..."
                dir('wanderlust-3tier-project/backend') {
                    sh '''
                        echo "Backend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    '''
                }
                dir('wanderlust-3tier-project/frontend') {
                    sh '''
                        echo "Frontend package.json audit:"
                        npm audit --audit-level high || echo "Audit completed with warnings"
                    '''
                }
            }
        }

        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    sh "mkdir -p ${WORKSPACE}/trivy-reports"
                    echo "üîç Scanning backend and frontend source files..."
                    sh """
                        docker run --rm -v ${WORKSPACE}/wanderlust-3tier-project/backend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports aquasec/trivy fs \
                        --scanners vuln,misconfig --severity HIGH,CRITICAL --exit-code 0 --format table /target || true
                    """
                    sh """
                        docker run --rm -v ${WORKSPACE}/wanderlust-3tier-project/frontend:/target \
                        -v ${WORKSPACE}/trivy-reports:/reports aquasec/trivy fs \
                        --scanners vuln,misconfig --severity HIGH,CRITICAL --exit-code 0 --format table /target || true
                    """
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dir('wanderlust-3tier-project') {
                        echo "üê≥ Building Docker images..."
                        sh """
                            docker build -t ${BACKEND_IMAGE}:${IMAGE_TAG} -f ./backend/Dockerfile_optimized ./backend
                            docker build -t ${FRONTEND_IMAGE}:${IMAGE_TAG} -f ./frontend/Dockerfile_optimized ./frontend
                            docker tag ${BACKEND_IMAGE}:${IMAGE_TAG} ${BACKEND_IMAGE}:latest
                            docker tag ${FRONTEND_IMAGE}:${IMAGE_TAG} ${FRONTEND_IMAGE}:latest
                            docker images | grep ${DOCKER_USER}/wanderlust
                        """
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "mkdir -p ${TRIVY_CACHE_DIR}"
                    echo "üîç Scanning built images..."
                    sh """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                        aquasec/trivy image --scanners vuln --severity HIGH,CRITICAL \
                        --exit-code 0 --format table ${BACKEND_IMAGE}:${IMAGE_TAG} || true
                    """
                    sh """
                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                        -v ${TRIVY_CACHE_DIR}:/root/.cache/ \
                        aquasec/trivy image --scanners vuln --severity HIGH,CRITICAL \
                        --exit-code 0 --format table ${FRONTEND_IMAGE}:${IMAGE_TAG} || true
                    """
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üö¢ Pushing images to Docker Hub..."
                    sh """
                        echo 'Perry123@' | docker login -u devopswithjunaid --password-stdin
                        docker push ${BACKEND_IMAGE}:${IMAGE_TAG}
                        docker push ${BACKEND_IMAGE}:latest
                        docker push ${FRONTEND_IMAGE}:${IMAGE_TAG}  
                        docker push ${FRONTEND_IMAGE}:latest
                    """
                    env.DOCKER_PUSH_SUCCESS = "true"
                }
            }
        }

        stage('Remote Deploy on Host with Docker Compose') {
            when {
                not { params.SKIP_DEPLOY }
            }
            steps {
                script {
                    sshagent(credentials: ['deploy-server-ssh']) {
                        sh """
                            echo "üöÄ Deploying on remote host..."
                            ssh -o StrictHostKeyChecking=no azureuser@20.55.29.56 '
                                cd /home/azureuser/devops-projects/wanderlust-3tier-project &&
                                docker compose pull &&
                                docker compose up -d &&
                                echo "‚úÖ Deployment completed successfully"
                            '
                        """
                        env.DEPLOY_SUCCESS = "true"
                    }
                }
            }
        }

        stage('Manual Cleanup') {
            steps {
                echo "üìã Built images available locally:"
                sh "docker images | grep ${DOCKER_USER}/wanderlust || true"
            }
        }
    }

    post {
        always {
            script {
                echo "=== PIPELINE SUMMARY ==="
                echo "üì¶ Docker Images Built ‚úÖ"
                if (env.DOCKER_PUSH_SUCCESS == "true") {
                    echo "üì§ Docker Hub Push ‚úÖ"
                } else {
                    echo "üì§ Docker Hub Push ‚ö†Ô∏è Failed"
                }
                if (env.DEPLOY_SUCCESS == "true") {
                    echo "üöÄ Deployment ‚úÖ"
                } else {
                    echo "üöÄ Deployment ‚ö†Ô∏è Skipped"
                }
            }
        }
    }
}
